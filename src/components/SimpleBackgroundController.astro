---
// SimpleBackgroundController.astro - 简化的背景控制器
---

<div class="simple-bg-controller">
    <button class="bg-toggle-btn" id="bgToggleBtn"> 🌸 </button>

    <div class="bg-control-panel" id="bgControlPanel">
        <h3>背景设置</h3>

        <div class="bg-themes">
            <button class="theme-btn" data-theme="sakura">bg1</button>
            <button class="theme-btn" data-theme="city">bg2</button>
            <button class="theme-btn" data-theme="sunset">bg3</button>
            <button class="theme-btn" data-theme="blossom">bg4</button>
            <button class="theme-btn" data-theme="sky">bg5</button>
        </div>

        <div class="opacity-control">
            <label>透明度: <span id="opacityDisplay">10%</span></label>
            <input type="range" id="opacityRange" min="0" max="30" value="10" />
        </div>

        <div class="particle-control">
            <label>
                <input type="checkbox" id="particleCheck" checked />
                粒子效果
            </label>
        </div>
    </div>
</div>

<style>
    .simple-bg-controller {
        position: fixed;
        top: 50%;
        right: 20px;
        transform: translateY(-50%);
        z-index: 1000;
    }

    .bg-toggle-btn {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: linear-gradient(135deg, #ff6b9d, #c44569);
        border: none;
        color: white;
        font-size: 24px;
        cursor: pointer;
        box-shadow: 0 4px 20px rgba(255, 107, 157, 0.4);
        transition: all 0.3s ease;
    }

    .bg-toggle-btn:hover {
        transform: scale(1.1);
        box-shadow: 0 6px 25px rgba(255, 107, 157, 0.6);
    }

    .bg-control-panel {
        position: absolute;
        right: 70px;
        top: 0;
        width: 300px;
        background: rgba(255, 255, 255, 0.95);
        border-radius: 16px;
        padding: 20px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(10px);
        opacity: 0;
        visibility: hidden;
        transform: translateX(20px);
        transition: all 0.3s ease;
    }

    .bg-control-panel.show {
        opacity: 1;
        visibility: visible;
        transform: translateX(0);
    }

    .bg-control-panel h3 {
        margin: 0 0 16px 0;
        color: #333;
        text-align: center;
    }

    .bg-themes {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 8px;
        margin-bottom: 20px;
    }

    .theme-btn {
        padding: 12px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        background: white;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 14px;
    }

    .theme-btn:hover,
    .theme-btn.active {
        border-color: #ff6b9d;
        background: rgba(255, 107, 157, 0.1);
        color: #ff6b9d;
    }

    .opacity-control,
    .particle-control {
        margin-bottom: 15px;
        color: #555;
    }

    .opacity-control label {
        display: flex;
        justify-content: space-between;
        margin-bottom: 8px;
    }

    #opacityRange {
        width: 100%;
    }

    .particle-control label {
        display: flex;
        align-items: center;
        gap: 8px;
        cursor: pointer;
    }

    /* 暗模式支持 */
    :global(.dark) .bg-control-panel {
        background: rgba(26, 31, 53, 0.95);
        color: #e5e7eb;
    }

    :global(.dark) .bg-control-panel h3 {
        color: #e5e7eb;
    }

    :global(.dark) .theme-btn {
        background: rgba(17, 24, 39, 0.8);
        border-color: rgba(255, 255, 255, 0.2);
        color: #e5e7eb;
    }

    /* 移动端适配 */
    @media (max-width: 768px) {
        .simple-bg-controller {
            right: 10px;
        }

        .bg-control-panel {
            width: 280px;
            right: 65px;
        }

        .bg-themes {
            grid-template-columns: 1fr;
        }
    }
</style>

<script>
    // 使用原生JavaScript，避免TypeScript问题
    (function () {
        // 等待DOM加载完成
        document.addEventListener("DOMContentLoaded", function () {
            const toggleBtn = document.getElementById("bgToggleBtn");
            const panel = document.getElementById("bgControlPanel");
            const opacityRange = document.getElementById("opacityRange");
            const opacityDisplay = document.getElementById("opacityDisplay");
            const particleCheck = document.getElementById("particleCheck");
            const themeButtons = document.querySelectorAll(".theme-btn");

            // 背景映射
            const backgrounds = {
                sakura: "/images/hero-images/t1.svg",
                city: "/images/hero-images/t2.svg",
                sunset: "/images/hero-images/t3.svg",
                blossom: "/images/hero-images/t4.svg",
                sky: "/images/hero-images/t5.svg",
            };

            // 切换面板
            if (toggleBtn && panel) {
                toggleBtn.addEventListener("click", function () {
                    panel.classList.toggle("show");
                });

                // 点击外部关闭
                document.addEventListener("click", function (e: Event) {
                    const target = e.target as HTMLElement;
                    if (!target || !target.closest(".simple-bg-controller")) {
                        panel.classList.remove("show");
                    }
                });
            }

            // 主题切换
            themeButtons.forEach(function (btn) {
                btn.addEventListener("click", function (this: HTMLElement) {
                    const theme = this.getAttribute("data-theme");
                    if (!theme) return;

                    // 更新按钮状态
                    themeButtons.forEach(function (b) {
                        b.classList.remove("active");
                    });
                    this.classList.add("active");

                    // 切换背景
                    changeBackground(theme);

                    // 保存设置
                    try {
                        localStorage.setItem("simple-bg-theme", theme);
                    } catch (e) {}
                });
            });

            // 透明度调节
            if (opacityRange && opacityDisplay) {
                opacityRange.addEventListener(
                    "input",
                    function (this: HTMLInputElement) {
                        const value = this.value;
                        opacityDisplay.textContent = value + "%";

                        // 应用透明度
                        const bgLayer = document.querySelector(
                            ".anime-bg-layer",
                        ) as HTMLElement;
                        if (bgLayer) {
                            bgLayer.style.opacity = String(Number(value) / 100);
                        }

                        // 保存设置
                        try {
                            localStorage.setItem("simple-bg-opacity", value);
                        } catch (e) {}
                    },
                );
            }

            // 粒子效果切换
            if (particleCheck) {
                particleCheck.addEventListener(
                    "change",
                    function (this: HTMLInputElement) {
                        const container = document.querySelector(
                            ".anime-particles-container",
                        ) as HTMLElement;
                        if (container) {
                            container.style.display = this.checked
                                ? "block"
                                : "none";
                        }

                        // 保存设置
                        try {
                            localStorage.setItem(
                                "simple-bg-particles",
                                String(this.checked),
                            );
                        } catch (e) {}
                    },
                );
            }

            // 切换背景函数
            function changeBackground(theme: string) {
                const bgLayer = document.querySelector(
                    ".anime-bg-layer",
                ) as HTMLElement;
                if (bgLayer && theme in backgrounds) {
                    bgLayer.style.backgroundImage =
                        'url("' +
                        backgrounds[theme as keyof typeof backgrounds] +
                        '")';
                }
            }

            // 加载保存的设置
            function loadSettings() {
                try {
                    // 加载主题
                    const savedTheme =
                        localStorage.getItem("simple-bg-theme") || "sakura";
                    const themeBtn = document.querySelector(
                        '[data-theme="' + savedTheme + '"]',
                    );
                    if (themeBtn) {
                        themeBtn.classList.add("active");
                        changeBackground(savedTheme);
                    }

                    // 加载透明度
                    const savedOpacity =
                        localStorage.getItem("simple-bg-opacity") || "10";
                    if (opacityRange && opacityDisplay) {
                        (opacityRange as HTMLInputElement).value = savedOpacity;
                        opacityDisplay.textContent = savedOpacity + "%";
                    }
                    const bgLayer = document.querySelector(
                        ".anime-bg-layer",
                    ) as HTMLElement;
                    if (bgLayer) {
                        bgLayer.style.opacity = String(
                            Number(savedOpacity) / 100,
                        );
                    }

                    // 加载粒子设置
                    const savedParticles = localStorage.getItem(
                        "simple-bg-particles",
                    );
                    const enableParticles = savedParticles !== "false";
                    if (particleCheck) {
                        (particleCheck as HTMLInputElement).checked =
                            enableParticles;
                    }
                    const container = document.querySelector(
                        ".anime-particles-container",
                    ) as HTMLElement;
                    if (container) {
                        container.style.display = enableParticles
                            ? "block"
                            : "none";
                    }
                } catch (e) {
                    // 忽略localStorage错误
                }
            }

            // 延迟加载设置
            setTimeout(loadSettings, 200);
        });
    })();
</script>
