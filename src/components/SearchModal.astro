---
// 搜索模态框组件
---

<div
    id="search-modal"
    class="fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center hidden"
>
    <div
        class="bg-white dark:bg-gray-800 w-full max-w-2xl mx-4 rounded-lg overflow-hidden"
    >
        <div
            class="p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center"
        >
            <h3 class="text-lg font-bold dark:text-white">搜索内容</h3>
            <button
                id="close-search"
                class="text-gray-500 hover:text-gray-700 dark:hover:text-gray-300"
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-6 w-6"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        <div class="p-4">
            <div class="relative mb-4">
                <div
                    class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-5 w-5 text-gray-400"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                        ></path>
                    </svg>
                </div>
                <input
                    type="text"
                    id="search-input"
                    class="w-full pl-10 pr-4 py-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="输入关键词搜索..."
                    autocomplete="off"
                />
            </div>
            <div id="search-results" class="max-h-96 overflow-y-auto mt-4">
                <!-- 搜索结果将在这里显示 -->
                <div class="p-4 text-center text-gray-500 dark:text-gray-400">
                    开始输入以搜索文章和页面
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    interface SearchItem {
        id: string;
        title: string;
        description: string;
        content: string;
        url: string;
        type: string;
        date: string;
        tags: string[];
        category?: string;
        mood?: string;
        location?: string;
    }

    document.addEventListener("DOMContentLoaded", () => {
        // 搜索索引缓存
        let searchIndex: SearchItem[] = [];
        let isLoading = false;

        // 初始化搜索模态框
        const searchToggle = document.getElementById("search-toggle");
        const searchModal = document.getElementById("search-modal");
        const closeSearch = document.getElementById("close-search");
        const searchInput = document.getElementById(
            "search-input",
        ) as HTMLInputElement;
        const searchResults = document.getElementById("search-results");

        if (
            searchToggle &&
            searchModal &&
            closeSearch &&
            searchInput &&
            searchResults
        ) {
            // 加载搜索索引
            async function loadSearchIndex(): Promise<void> {
                if (searchIndex.length > 0 || isLoading) return; // 已加载过或正在加载

                isLoading = true;
                try {
                    const response = await fetch("/api/search.json");
                    if (response.ok) {
                        searchIndex = (await response.json()) as SearchItem[];
                        console.log(
                            `搜索索引加载完成，共 ${searchIndex.length} 项内容`,
                        );
                    } else {
                        console.error("搜索索引加载失败:", response.status);
                    }
                } catch (error) {
                    console.error("搜索索引加载错误:", error);
                } finally {
                    isLoading = false;
                }
            }

            // 执行搜索
            function performSearch(query: string): SearchItem[] {
                if (!query.trim()) return [];

                const searchTerm = query.toLowerCase();

                return searchIndex
                    .filter((item: SearchItem) => {
                        const titleMatch = item.title
                            .toLowerCase()
                            .includes(searchTerm);
                        const descriptionMatch = item.description
                            .toLowerCase()
                            .includes(searchTerm);
                        const contentMatch = item.content
                            .toLowerCase()
                            .includes(searchTerm);
                        const tagsMatch = item.tags?.some((tag: string) =>
                            tag.toLowerCase().includes(searchTerm),
                        );

                        return (
                            titleMatch ||
                            descriptionMatch ||
                            contentMatch ||
                            tagsMatch
                        );
                    })
                    .slice(0, 10); // 限制结果数量
            }

            // 渲染搜索结果
            function renderSearchResults(
                results: SearchItem[],
                query: string,
            ): void {
                if (!searchResults) return;

                if (results.length === 0) {
                    searchResults.innerHTML = `<div class="p-4 text-center text-gray-500 dark:text-gray-400">没有找到匹配"${query}"的结果</div>`;
                    return;
                }

                let html = "";
                results.forEach((result: SearchItem) => {
                    // 高亮搜索关键词
                    const highlightedTitle = highlightText(result.title, query);
                    const highlightedDescription = highlightText(
                        result.description,
                        query,
                    );

                    html += `
                        <a href="${result.url}" class="block p-3 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors">
                            <div class="flex justify-between items-start mb-1">
                                <h4 class="text-lg font-medium text-gray-900 dark:text-white">${highlightedTitle}</h4>
                                <span class="text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded">${result.type}</span>
                            </div>
                            <div class="text-sm text-gray-500 dark:text-gray-400 mb-1">${result.date}</div>
                            <p class="text-gray-700 dark:text-gray-300 text-sm line-clamp-2">${highlightedDescription}</p>
                            ${
                                result.tags && result.tags.length > 0
                                    ? `
                                <div class="mt-2 flex flex-wrap gap-1">
                                    ${result.tags
                                        .slice(0, 3)
                                        .map(
                                            (tag: string) =>
                                                `<span class="text-xs bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-300 px-1.5 py-0.5 rounded">${tag}</span>`,
                                        )
                                        .join("")}
                                </div>
                            `
                                    : ""
                            }
                        </a>
                    `;
                });
                searchResults.innerHTML = html;
            }

            // 高亮文本中的搜索关键词
            function highlightText(text: string, query: string): string {
                if (!query.trim()) return text;
                const regex = new RegExp(
                    `(${query.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")})`,
                    "gi",
                );
                return text.replace(
                    regex,
                    '<mark class="bg-yellow-200 dark:bg-yellow-800">$1</mark>',
                );
            }

            // 打开搜索模态框
            searchToggle.addEventListener("click", () => {
                searchModal.classList.remove("hidden");
                searchInput.focus();
                // 阻止滚动
                document.body.style.overflow = "hidden";
                // 首次打开时加载搜索索引
                loadSearchIndex();
            });

            // 关闭搜索模态框
            closeSearch.addEventListener("click", () => {
                searchModal.classList.add("hidden");
                // 恢复滚动
                document.body.style.overflow = "";
            });

            // 点击模态框外部关闭
            searchModal.addEventListener("click", (e) => {
                if (e.target === searchModal) {
                    searchModal.classList.add("hidden");
                    document.body.style.overflow = "";
                }
            });

            // ESC键关闭
            document.addEventListener("keydown", (e) => {
                if (
                    e.key === "Escape" &&
                    !searchModal.classList.contains("hidden")
                ) {
                    searchModal.classList.add("hidden");
                    document.body.style.overflow = "";
                }
            });

            // 搜索功能
            searchInput.addEventListener(
                "input",
                debounce(async () => {
                    const query = searchInput.value.trim();

                    if (query.length < 2) {
                        if (searchResults) {
                            searchResults.innerHTML = `<div class="p-4 text-center text-gray-500 dark:text-gray-400">请输入至少2个字符</div>`;
                        }
                        return;
                    }

                    // 确保搜索索引已加载
                    if (searchIndex.length === 0 && !isLoading) {
                        if (searchResults) {
                            searchResults.innerHTML = `<div class="p-4 text-center text-gray-500 dark:text-gray-400">正在加载搜索索引...</div>`;
                        }
                        await loadSearchIndex();
                    }

                    if (searchIndex.length === 0) {
                        if (searchResults) {
                            searchResults.innerHTML = `<div class="p-4 text-center text-gray-500 dark:text-gray-400">搜索索引加载失败，请刷新页面重试</div>`;
                        }
                        return;
                    }

                    // 执行搜索
                    const results = performSearch(query);
                    renderSearchResults(results, query);
                }, 300),
            );
        }
    });

    // 防抖函数
    function debounce(func: Function, wait: number) {
        let timeout: number | null = null;
        return function (this: any, ...args: any[]) {
            const context = this;
            if (timeout) clearTimeout(timeout);
            timeout = setTimeout(() => {
                func.apply(context, args);
            }, wait) as unknown as number;
        };
    }
</script>
