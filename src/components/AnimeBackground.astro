---
// AnimeBackground.astro - 二次元背景组件
interface Props {
	variant?: 'sakura' | 'ocean' | 'sunset' | 'random';
	opacity?: number;
	particles?: boolean;
}

const { variant = 'random', opacity = 0.1, particles = true } = Astro.props;

// 背景图片列表（你需要将实际的图片放到 public/images/anime-bg/ 目录下）
const backgrounds = [
	'/images/anime-bg/anime-bg-1.svg',
	'/images/anime-bg/anime-city.svg', 
	'/images/anime-bg/sunset-field.svg',
	'/images/anime-bg/cherry-blossom.svg',
	'/images/anime-bg/anime-sky.svg'
];

let selectedBg;
if (variant === 'random') {
	selectedBg = backgrounds[Math.floor(Math.random() * backgrounds.length)];
} else {
	const bgMap = {
		'sakura': backgrounds[0],
		'ocean': backgrounds[1], 
		'sunset': backgrounds[2]
	};
	selectedBg = bgMap[variant] || backgrounds[0];
}
---

<div class="anime-background-container">
	<!-- 主背景图片 -->
	<div 
		class="anime-bg-layer" 
		style={`background-image: url('${selectedBg}'); opacity: ${opacity};`}
	></div>
	
	<!-- 渐变叠层 -->
	<div class="anime-gradient-overlay"></div>
	
	<!-- 粒子效果 -->
	{particles && (
		<div class="anime-particles-container" id="particles">
			<!-- 粒子将通过JavaScript动态生成 -->
		</div>
	)}
</div>

<style>
	.anime-background-container {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: -10;
		pointer-events: none;
	}

	.anime-bg-layer {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-size: cover;
		background-position: center;
		background-repeat: no-repeat;
		background-attachment: fixed;
		transition: opacity 1s ease-in-out;
	}

	.anime-gradient-overlay {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: linear-gradient(
			135deg,
			rgba(255, 182, 193, 0.05) 0%,
			rgba(173, 216, 230, 0.05) 25%,
			rgba(221, 160, 221, 0.05) 50%,
			rgba(255, 218, 185, 0.05) 75%,
			rgba(255, 182, 193, 0.05) 100%
		);
		animation: gradientShift 10s ease-in-out infinite;
	}

	@keyframes gradientShift {
		0%, 100% {
			opacity: 0.3;
		}
		50% {
			opacity: 0.6;
		}
	}

	.anime-particles-container {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		overflow: hidden;
	}

	:global(.anime-particle) {
		position: absolute;
		border-radius: 50%;
		pointer-events: none;
		animation: floatUp 8s linear infinite;
	}

	@keyframes floatUp {
		0% {
			transform: translateY(100vh) rotate(0deg);
			opacity: 0;
		}
		10% {
			opacity: 1;
		}
		90% {
			opacity: 1;
		}
		100% {
			transform: translateY(-100px) rotate(360deg);
			opacity: 0;
		}
	}

	/* 暗模式调整 */
	:global(.dark) .anime-bg-layer {
		filter: brightness(0.7) contrast(1.1);
	}

	:global(.dark) .anime-gradient-overlay {
		background: linear-gradient(
			135deg,
			rgba(30, 30, 60, 0.1) 0%,
			rgba(20, 20, 40, 0.1) 50%,
			rgba(40, 30, 60, 0.1) 100%
		);
	}
</style>

<script>
	// 创建粒子效果
	function createParticles() {
		const container = document.getElementById('particles');
		if (!container) return;

		const colors = ['#ffb6c1', '#add8e6', '#dda0dd', '#f0e68c', '#98fb98'];
		const particleCount = 20;

		for (let i = 0; i < particleCount; i++) {
			const particle = document.createElement('div');
			particle.className = 'anime-particle';
			
			// 随机颜色和大小
			const color = colors[Math.floor(Math.random() * colors.length)];
			const size = Math.random() * 6 + 2; // 2-8px
			
			particle.style.cssText = `
				width: ${size}px;
				height: ${size}px;
				background-color: ${color};
				left: ${Math.random() * 100}%;
				animation-delay: ${Math.random() * 8}s;
				animation-duration: ${8 + Math.random() * 4}s;
			`;
			
			container.appendChild(particle);
		}
	}

	// 页面加载后创建粒子
	document.addEventListener('DOMContentLoaded', createParticles);

	// 背景切换功能
	let currentBgIndex = 0;
	const backgrounds = [
		'/images/anime-bg/anime-bg-1.svg',
		'/images/anime-bg/anime-city.svg', 
		'/images/anime-bg/sunset-field.svg',
		'/images/anime-bg/cherry-blossom.svg',
		'/images/anime-bg/anime-sky.svg'
	];

	function switchBackground() {
		const bgLayer = document.querySelector('.anime-bg-layer') as HTMLElement;
		if (bgLayer) {
			currentBgIndex = (currentBgIndex + 1) % backgrounds.length;
			bgLayer.style.backgroundImage = `url('${backgrounds[currentBgIndex]}')`;
		}
	}

	// 每30秒切换一次背景（可选）
	// setInterval(switchBackground, 30000);
</script>
