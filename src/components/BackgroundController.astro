---
// BackgroundController.astro - 背景切换控制器
---

<div class="background-controller">
    <button class="bg-controller-toggle" id="bgToggle">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
            <path
                d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"
            ></path>
        </svg>
    </button>

    <div class="bg-options-panel" id="bgPanel">
        <h3>选择背景</h3>
        <div class="bg-options-grid">
            <button class="bg-option" data-bg="sakura">樱花</button>
            <button class="bg-option" data-bg="city">城市</button>
            <button class="bg-option" data-bg="sunset">夕阳</button>
            <button class="bg-option" data-bg="ocean">海洋</button>
            <button class="bg-option" data-bg="random">随机</button>
        </div>

        <div class="bg-controls">
            <label for="opacity-slider">背景透明度:</label>
            <input
                type="range"
                id="opacitySlider"
                min="0"
                max="30"
                value="10"
            />
            <span id="opacityValue">10%</span>
        </div>

        <div class="bg-controls">
            <label>
                <input type="checkbox" id="particlesToggle" checked />
                粒子效果
            </label>
        </div>
    </div>
</div>

<style>
    .background-controller {
        position: fixed;
        top: 50%;
        right: 20px;
        transform: translateY(-50%);
        z-index: 1000;
    }

    .bg-controller-toggle {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: linear-gradient(135deg, #ff6b9d, #c44569);
        border: none;
        color: white;
        cursor: pointer;
        box-shadow: 0 4px 15px rgba(255, 107, 157, 0.3);
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .bg-controller-toggle:hover {
        transform: scale(1.1);
        box-shadow: 0 6px 20px rgba(255, 107, 157, 0.4);
    }

    .bg-options-panel {
        position: absolute;
        right: 60px;
        top: 0;
        width: 280px;
        background: rgba(255, 255, 255, 0.95);
        border-radius: 16px;
        padding: 20px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        opacity: 0;
        visibility: hidden;
        transform: translateX(20px);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .bg-options-panel.show {
        opacity: 1;
        visibility: visible;
        transform: translateX(0);
    }

    .bg-options-panel h3 {
        margin: 0 0 15px 0;
        color: #333;
        font-size: 16px;
        font-weight: 600;
    }

    .bg-options-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 8px;
        margin-bottom: 20px;
    }

    .bg-option {
        padding: 8px 12px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        background: white;
        color: #333;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 14px;
    }

    .bg-option:hover {
        border-color: #ff6b9d;
        background: rgba(255, 107, 157, 0.1);
    }

    .bg-option.active {
        border-color: #ff6b9d;
        background: #ff6b9d;
        color: white;
    }

    .bg-controls {
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 14px;
        color: #555;
    }

    .bg-controls label {
        flex-shrink: 0;
    }

    #opacitySlider {
        flex: 1;
        margin: 0 8px;
    }

    #opacityValue {
        min-width: 35px;
        text-align: right;
        font-weight: 600;
        color: #ff6b9d;
    }

    /* 暗模式 */
    :global(.dark) .bg-options-panel {
        background: rgba(26, 31, 53, 0.95);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    :global(.dark) .bg-options-panel h3,
    :global(.dark) .bg-controls {
        color: #e5e7eb;
    }

    :global(.dark) .bg-option {
        background: rgba(17, 24, 39, 0.8);
        border-color: rgba(255, 255, 255, 0.2);
        color: #e5e7eb;
    }

    /* 移动端适配 */
    @media (max-width: 768px) {
        .background-controller {
            right: 10px;
        }

        .bg-options-panel {
            width: 250px;
            right: 55px;
        }
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const toggle = document.getElementById("bgToggle") as HTMLButtonElement;
        const panel = document.getElementById("bgPanel") as HTMLElement;
        const opacitySlider = document.getElementById(
            "opacitySlider",
        ) as HTMLInputElement;
        const opacityValue = document.getElementById(
            "opacityValue",
        ) as HTMLElement;
        const particlesToggle = document.getElementById(
            "particlesToggle",
        ) as HTMLInputElement;
        const bgOptions = document.querySelectorAll(
            ".bg-option",
        ) as NodeListOf<HTMLElement>;

        // 背景图片映射
        const backgroundMap: Record<string, string> = {
            sakura: "/images/hero-images/t1.svg",
            city: "/images/hero-images/t2.svg",
            sunset: "/images/hero-images/t3.svg",
            ocean: "/images/hero-images/t4.svg",
            random: "/images/hero-images/t5.svg",
        };

        // 切换面板显示
        if (toggle && panel) {
            toggle.addEventListener("click", function () {
                panel.classList.toggle("show");
            });
        }

        // 点击外部关闭面板
        document.addEventListener("click", function (e: Event) {
            const target = e.target as HTMLElement;
            if (target && !target.closest(".background-controller") && panel) {
                panel.classList.remove("show");
            }
        });

        // 背景选择
        bgOptions.forEach((option) => {
            option.addEventListener("click", function (this: HTMLElement) {
                const bgType = this.dataset.bg as string;

                // 更新选中状态
                bgOptions.forEach((opt) => opt.classList.remove("active"));
                this.classList.add("active");

                // 切换背景
                changeBackground(bgType);

                // 保存设置
                localStorage.setItem("anime-bg-type", bgType);
            });
        });

        // 透明度调整
        if (opacitySlider && opacityValue) {
            opacitySlider.addEventListener("input", function () {
                const opacity = this.value;
                if (opacityValue) {
                    opacityValue.textContent = opacity + "%";
                }

                // 应用透明度
                const bgLayer = document.querySelector(
                    ".anime-bg-layer",
                ) as HTMLElement;
                if (bgLayer) {
                    bgLayer.style.opacity = (
                        parseInt(opacity) / 100
                    ).toString();
                }

                // 保存设置
                localStorage.setItem("anime-bg-opacity", opacity);
            });
        }

        // 粒子效果切换
        if (particlesToggle) {
            particlesToggle.addEventListener("change", function () {
                const particlesContainer = document.querySelector(
                    ".anime-particles-container",
                ) as HTMLElement;
                if (particlesContainer) {
                    particlesContainer.style.display = this.checked
                        ? "block"
                        : "none";
                }

                // 保存设置
                localStorage.setItem(
                    "anime-particles-enabled",
                    this.checked.toString(),
                );
            });
        }

        // 背景切换函数
        function changeBackground(type: string) {
            const bgLayer = document.querySelector(
                ".anime-bg-layer",
            ) as HTMLElement;
            if (!bgLayer) return;

            if (type === "random") {
                const images = Object.values(backgroundMap).filter(
                    (img) => img !== "random",
                );
                const randomImage =
                    images[Math.floor(Math.random() * images.length)];
                bgLayer.style.backgroundImage = `url('${randomImage}')`;
            } else {
                const imageUrl = backgroundMap[type];
                if (imageUrl) {
                    bgLayer.style.backgroundImage = `url('${imageUrl}')`;
                }
            }
        }

        // 加载保存的设置
        function loadSettings() {
            const savedBgType =
                localStorage.getItem("anime-bg-type") || "random";
            const savedOpacity =
                localStorage.getItem("anime-bg-opacity") || "10";
            const savedParticles =
                localStorage.getItem("anime-particles-enabled") !== "false";

            // 应用背景类型
            const activeOption = document.querySelector(
                `[data-bg="${savedBgType}"]`,
            ) as HTMLElement;
            if (activeOption) {
                activeOption.classList.add("active");
                changeBackground(savedBgType);
            }

            // 应用透明度
            if (opacitySlider && opacityValue) {
                opacitySlider.value = savedOpacity;
                opacityValue.textContent = savedOpacity + "%";
            }
            const bgLayer = document.querySelector(
                ".anime-bg-layer",
            ) as HTMLElement;
            if (bgLayer) {
                bgLayer.style.opacity = (
                    parseInt(savedOpacity) / 100
                ).toString();
            }

            // 应用粒子设置
            if (particlesToggle) {
                particlesToggle.checked = savedParticles;
            }
            const particlesContainer = document.querySelector(
                ".anime-particles-container",
            ) as HTMLElement;
            if (particlesContainer) {
                particlesContainer.style.display = savedParticles
                    ? "block"
                    : "none";
            }
        }

        // 页面加载时应用设置
        setTimeout(loadSettings, 100);
    });
</script>
