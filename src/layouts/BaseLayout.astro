---
// BaseLayout.astro - 基础布局组件，包含全局背景
import BackgroundModal from "../components/BackgroundModal.astro";
import BaseHead from "../components/BaseHead.astro";
import Footer from "../components/Footer.astro";
import GlobalBackground from "../components/GlobalBackground.astro";
import Header from "../components/Header.astro";

export interface Props {
    title: string;
    description: string;
}

const { title, description } = Astro.props;
---

<!doctype html>
<html lang="zh-CN">
    <head>
        <BaseHead title={title} description={description} />
    </head>
    <body>
        <!-- 全局背景系统 -->
        <GlobalBackground />

        <!-- 背景设置模态框 -->
        <BackgroundModal />

        <!-- 页面头部 -->
        <Header />

        <!-- 页面内容 -->
        <slot />

        <!-- 页面尾部 -->
        <Footer />

        <!-- 智能布局系统 -->
        <script is:inline>
            // 智能布局自适应系统
            class SmartLayout {
                constructor() {
                    this.init();
                    this.setupEventListeners();
                }

                init() {
                    this.updateLayout();
                }

                setupEventListeners() {
                    // 监听窗口大小变化
                    window.addEventListener(
                        "resize",
                        this.debounce(() => {
                            this.updateLayout();
                        }, 250),
                    );

                    // 监听设备方向变化
                    window.addEventListener("orientationchange", () => {
                        setTimeout(() => this.updateLayout(), 100);
                    });
                }

                updateLayout() {
                    const width = window.innerWidth;
                    const height = window.innerHeight;
                    const ratio = width / height;

                    this.adjustContainerSizes(width, ratio);
                    this.optimizeTechGrid();
                }

                adjustContainerSizes(width, ratio) {
                    const root = document.documentElement;

                    let contentWidth, wideWidth, narrowWidth;

                    if (width < 640) {
                        contentWidth = "95vw";
                        wideWidth = "98vw";
                        narrowWidth = "92vw";
                    } else if (width < 1024) {
                        contentWidth = "90vw";
                        wideWidth = "95vw";
                        narrowWidth = "85vw";
                    } else if (width < 1440) {
                        contentWidth = ratio > 1.5 ? "80vw" : "85vw";
                        wideWidth = ratio > 1.5 ? "90vw" : "92vw";
                        narrowWidth = "75vw";
                    } else if (width < 1920) {
                        contentWidth = ratio > 1.7 ? "70vw" : "75vw";
                        wideWidth = ratio > 1.7 ? "85vw" : "88vw";
                        narrowWidth = "65vw";
                    } else {
                        contentWidth = ratio > 2 ? "60vw" : "65vw";
                        wideWidth = ratio > 2 ? "75vw" : "80vw";
                        narrowWidth = "55vw";
                    }

                    root.style.setProperty(
                        "--dynamic-content-width",
                        contentWidth,
                    );
                    root.style.setProperty("--dynamic-wide-width", wideWidth);
                    root.style.setProperty(
                        "--dynamic-narrow-width",
                        narrowWidth,
                    );
                }

                optimizeTechGrid() {
                    const techCards = document.querySelectorAll(".tech-card");
                    if (techCards.length === 0) return;

                    const container = techCards[0].parentElement;
                    const width = window.innerWidth;

                    let columns;
                    if (width < 480) columns = 3;
                    else if (width < 640) columns = 4;
                    else if (width < 768) columns = 5;
                    else if (width < 1024) columns = 6;
                    else if (width < 1280) columns = 7;
                    else if (width < 1600) columns = 8;
                    else columns = 9;

                    if (container) {
                        container.style.gridTemplateColumns = `repeat(${columns}, 1fr)`;
                    }
                }

                debounce(func, wait) {
                    let timeout;
                    return function executedFunction(...args) {
                        const later = () => {
                            clearTimeout(timeout);
                            func(...args);
                        };
                        clearTimeout(timeout);
                        timeout = setTimeout(later, wait);
                    };
                }
            }

            // 初始化智能布局系统
            document.addEventListener("DOMContentLoaded", () => {
                new SmartLayout();
            });
        </script>
    </body>
</html>

<style is:global>
    /* 确保页面内容不被全局背景影响 */
    body {
        position: relative;
        z-index: 1;
    }
</style>
