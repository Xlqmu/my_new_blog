---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { SITE_DESCRIPTION, SITE_TITLE } from "../../consts";
import { getCollection } from "astro:content";

// 获取所有博客文章
const allPosts = await getCollection("blog");
const posts = allPosts.sort(
    (a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime(),
);

// 统计标签
const tagCounts: Record<string, number> = {};
allPosts.forEach((post) => {
    if (post.data.tags) {
        post.data.tags.forEach((tag) => {
            tagCounts[tag] = (tagCounts[tag] || 0) + 1;
        });
    }
});

// 按数量排序标签
const sortedTags = Object.entries(tagCounts)
    .sort(([, a], [, b]) => (b as number) - (a as number))
    .slice(0, 20); // 只显示前20个最常用的标签
---

<BaseLayout title={`标签 | ${SITE_TITLE}`} description={SITE_DESCRIPTION}>
    <main class="container mx-auto px-4 py-12">
        <div class="max-w-4xl mx-auto">
            <h1
                class="text-3xl font-bold mb-6 text-gray-800 dark:text-gray-100"
            >
                标签云
            </h1>
            <p class="text-lg mb-8 text-gray-700 dark:text-gray-300">
                所有文章的标签集合，点击标签可以查看相关文章。
            </p>

            <div class="flex flex-wrap gap-3">
                {
                    Object.entries(tagCounts)
                        .sort(([, a], [, b]) => (b as number) - (a as number))
                        .map(([tag, count]) => (
                            <span
                                class="px-3 py-1.5 text-xs bg-blue-500 text-white rounded-full hover:bg-blue-600 transition cursor-pointer tag-filter"
                                data-tag={tag}
                            >
                                {tag} ({count})
                            </span>
                        ))
                }
            </div>

            <h2
                class="text-2xl font-bold mb-4 text-gray-800 dark:text-gray-100"
            >
                所有文章
            </h2>

            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
                <div class="space-y-4 posts-container">
                    {
                        posts.map((post) => (
                            <article
                                class="border-b border-gray-200 dark:border-gray-700 pb-4 post-item"
                                data-tags={post.data.tags?.join(" ") || ""}
                            >
                                <h3>
                                    <a
                                        href={`/blog/${post.id}`}
                                        class="text-lg font-medium hover:text-blue-500 text-gray-900 dark:text-white"
                                    >
                                        {post.data.title}
                                    </a>
                                </h3>
                                <div class="flex items-center gap-4 mt-2">
                                    <time class="text-gray-600 dark:text-gray-300">
                                        {post.data.pubDate.toLocaleDateString(
                                            "zh-CN",
                                        )}
                                    </time>
                                    {post.data.tags &&
                                        post.data.tags.length > 0 && (
                                            <div class="flex gap-2">
                                                {post.data.tags.map(
                                                    (tag: string) => (
                                                        <span class="text-xs bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-2 py-1 rounded">
                                                            {tag}
                                                        </span>
                                                    ),
                                                )}
                                            </div>
                                        )}
                                </div>
                                {post.data.description && (
                                    <p class="text-gray-600 dark:text-gray-300 mt-2">
                                        {post.data.description}
                                    </p>
                                )}
                            </article>
                        ))
                    }
                </div>
            </div>
        </div>
    </main>
</BaseLayout>

<script>
    // 获取所有标签和文章元素
    const tagFilters = document.querySelectorAll(".tag-filter");
    const postItems = document.querySelectorAll(".post-item");
    let activeTag = "";

    // 标签过滤功能
    tagFilters.forEach((tag) => {
        tag.addEventListener("click", () => {
            const tagName = tag.getAttribute("data-tag");
            if (!tagName) return;

            // 切换激活状态
            if (activeTag === tagName) {
                // 如果点击的是当前激活的标签，则取消过滤
                activeTag = "";
                tagFilters.forEach((t) => t.classList.remove("bg-blue-700"));
                tagFilters.forEach((t) => t.classList.add("bg-blue-500"));
            } else {
                // 激活新标签
                activeTag = tagName;
                tagFilters.forEach((t) => t.classList.remove("bg-blue-700"));
                tagFilters.forEach((t) => t.classList.add("bg-blue-500"));
                tag.classList.remove("bg-blue-500");
                tag.classList.add("bg-blue-700");
            }

            // 过滤文章
            postItems.forEach((post) => {
                const postTags = post.getAttribute("data-tags");
                const htmlElement = post as HTMLElement;
                if (activeTag === "" || postTags?.includes(activeTag)) {
                    htmlElement.style.display = "block";
                } else {
                    htmlElement.style.display = "none";
                }
            });
        });
    });
</script>
